from telethon import TelegramClient, events
import os
import datetime
from telethon.tl.types import UpdateNewChannelMessage, UpdateEditChannelMessage, MessageMediaDocument, UpdateBotMessageReaction
import shutil
import re
import zipfile
import rarfile
import patoolib
import pandas as pd
import random


import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from gspread_formatting.dataframe import format_with_dataframe
from oauth2client.service_account import ServiceAccountCredentials
import textdistance

from collections import OrderedDict

from telethon.tl.functions.messages import SendMediaRequest
from telethon.tl.types import InputMediaUploadedPhoto, MessageEntityBold, MessageEntityUnderline
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch

api_id = '27857864'
api_hash = '3224d8685a163fbaafc782f30e95937f'
bot_token = '7372987398:AAFpA4weK_NXtCjrn5gnmeFp3lVwE_RVw0s'


googleJsonPath = "google_secret/client_secret.json"
creds_sheets = ServiceAccountCredentials.from_json_keyfile_name(googleJsonPath, ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"])
gs = gspread.authorize(creds_sheets)
# sh = gs.open('Botick_memory')
sh = gs.open('test_bot_click')
worksheet = sh.sheet1
# worksheet.clear()

data = {'–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': [],'–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞': [], '–ü–∞—Ü–∏–µ–Ω—Ç': [], '–í—Ä–∞—á': [],  '–¢–∏–ø': [], '–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏': [], '–î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ': [],'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [], '–¶–≤–µ—Ç': [], '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':[], '–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤': [],'–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫': [], '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': [], '–¢–µ—Ö–Ω–∏–∫': [],  'emoji': [], '–ò–º—è —Ñ–∞–π–ª–∞': [], 'Number - ImplantLibraryEntryDescriptor':[],  'sms_id': []}
df_ = pd.DataFrame(data)

columns = ['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞','–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞','–ü–∞—Ü–∏–µ–Ω—Ç','–í—Ä–∞—á','–¢–∏–ø','–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏',  '–î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–¶–≤–µ—Ç','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤','–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–¢–µ—Ö–Ω–∏–∫', 'emoji', '–ò–º—è —Ñ–∞–π–ª–∞','Number - ImplantLibraryEntryDescriptor','sms_id']

df = pd.DataFrame(worksheet.get_all_records(expected_headers = columns)) #–ø–æ–ª—É—á–∏—Ç—å
#df_ = 
set_with_dataframe(worksheet, df_)
format_with_dataframe(worksheet, df_, include_column_header=True) #–∑–∞–ø–∏—Å–∞—Ç—å
print('Google Excel Connected Successfully')
# print(worksheet.get_all_records())	

emoji_list = {'‚ù§Ô∏è':'–†–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞','ü§¨':'–ë—Ä–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–æ—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏)','üíî':'–ë—Ä–∞–∫ –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—á–∞—Ç—å—é)','üò°':'–ß–∞—Å—Ç–∏—á–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ','ü§î':'–†–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É',}
client = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)
print('TelegramClient Connected Successfully')
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
message_reactions = {}

def is_zip_file(file_name):
    return re.search(r'\.zip$', file_name, re.IGNORECASE) is not None


def list_files_in_zip(file_name):
    with zipfile.ZipFile(file_name, 'r') as zip_file:
        print(f"Files in archive {zip_file.namelist()}:")
        count = 0
        for file in zip_file.namelist():
            if 'constructionInfo' not in str(file) and '.stl' in str(file):
                # print(f"- {file}")
                count += 1
        return count

def extract_constructionInfo_from_zip(file_name):
    ci = False
    with zipfile.ZipFile(file_name, 'r') as zip_file:
        for file in zip_file.namelist():
            if 'constructionInfo' in str(file):
                print(f'–ù–∞—à–µ–ª constructionInfo –≤ {file_name}')
                ci = True
                try:
                    with zip_file.open(file) as f:
                        content = f.read().decode('utf-8')
                        # print(content)
                        numbers = re.findall(r'<Number>(.*?)</Number>', content)
                        descriptors = re.findall(r'<ImplantLibraryEntryDescriptor>(.*?)</ImplantLibraryEntryDescriptor>', content)
                        str_n_d = ''
                        if not descriptors:
                            for i in range(len(numbers)):
                                # print(descriptors)
                                descriptors.append('–ù–µ –Ω–∞–π–¥–µ–Ω')
                        if numbers and descriptors:
                            for i, (number, descriptor) in enumerate(zip(numbers, descriptors), start=1):
                                str_n_d += f'{i} –ø–∞—Ä–∞: Number={number}, Descriptor={descriptor}\n'
                                print(f"{i} –ø–∞—Ä–∞: Number={number}, Descriptor={descriptor}")
                        else:
                            str_n_d += 'NoneInfo'
                        return str_n_d
                except:
                    str_n_d = 'ConstructionInfoOpeningErrorNone'
                    return str_n_d
    if ci == False:
        str_n_d = 'NoneConstructionInfo'
        return str_n_d

def is_rar_file(file_name):
    return re.search(r'\.rar$', file_name, re.IGNORECASE) is not None

def list_files_in_rar(file_name):
    with rarfile.RarFile(file_name, 'r') as rar_ref:
        print(f"Files in archive {rar_ref.namelist()}:")
        count = 0
        for file in rar_ref.namelist():
            if 'constructionInfo' not in str(file) and '.stl' in str(file):
                # print(f"- {file}")
                count += 1
        return count

def extract_constructionInfo_from_rar(file_name):
    ci = False
    with rarfile.RarFile(file_name, 'r') as rar_ref:
        for file in rar_ref.namelist():
            if 'constructionInfo' in str(file):
                print(f'–ù–∞—à–µ–ª constructionInfo –≤ {file_name}')
                ci = True
                shutil.rmtree('temp')
                patoolib.extract_archive(file_name, outdir="temp")
                try:
                    with open(f"temp/{file}", "r", encoding="utf-8") as file:
                        content = file.read()
                        numbers = re.findall(r'<Number>(.*?)</Number>', content)
                        descriptors = re.findall(r'<ImplantLibraryEntryDescriptor>(.*?)</ImplantLibraryEntryDescriptor>', content)
                        str_n_d = ''
                        if not descriptors:
                            for i in range(len(numbers)):
                                # print(descriptors)
                                descriptors.append('–ù–µ –Ω–∞–π–¥–µ–Ω')
                        if numbers and descriptors:
                            for i, (number, descriptor) in enumerate(zip(numbers, descriptors), start=1):
                                str_n_d += f'{i} –ø–∞—Ä–∞: Number={number}, Descriptor={descriptor}\n'
                                print(f"{i} –ø–∞—Ä–∞: Number={number}, Descriptor={descriptor}")
                        else:
                            str_n_d += 'NoneInfo'
                        return str_n_d
                except:
                    str_n_d = 'ConstructionInfoOpeningErrorNone'
                    return str_n_d

    if ci == False:
        str_n_d = 'NoneConstructionInfo'
        return str_n_d

def is_stl_file(file_name):
    return re.search(r'\.stl$', file_name, re.IGNORECASE) is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
async def send_image_with_text(client, chat_id, image_path, bold_text, underlined_text, reply_to):
	message_text = f"<b>{bold_text}</b>\n<u>{underlined_text}</u>"
	input_file = await client.upload_file(image_path)
	await client.send_file(chat_id, file=input_file, caption=message_text, parse_mode='HTML', reply_to=reply_to)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
async def get_group_participants(client, group_id):
    participants = await client(GetParticipantsRequest(
        channel=group_id,
        filter=ChannelParticipantsSearch(''),
        offset=0,
        limit=100,
        hash=0
    ))
    return {user.id: user.username for user in participants.users}



@client.on(events.Raw())
async def handler(event):
	global message_reactions
	# print(f"\nEvent: {event}\n")
	if isinstance(event, UpdateNewChannelMessage):
		print(f"New channel message received: {event.message}")
		if event.message.media and hasattr(event.message.media, 'document'):
			document = event.message.media.document
			message_id = event.message.id
			caption = event.message.message
			document = event.message.media.document
			file_name = document.attributes[0].file_name
			file_id = document.id
			user_id_ = event.message.from_id.user_id
			all_users = await get_group_participants(client,-1002154104395)
			user_tg = all_users[user_id_]
			if user_tg is None:
				user_tg = user_id_
			print(f'user_tg>>>{user_tg}')

			print(f"Document received: Title: {document.attributes[0].file_name}, ID: {document.id}, Message: {event.message.message}")
			print(f"sms_id : {message_id}, file_name: {file_name}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption}")
			
			

			# –ü—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
			path = os.path.join('downloads', file_name)

			if is_zip_file(path):
				# –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
				await client.download_media(document, file=path)
				print(f"Document downloaded and saved to {path}")
				#–†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º zip
				count_files = list_files_in_zip(path)
				pares = extract_constructionInfo_from_zip(path)
				print(f'message_id: {message_id}, count_files : {count_files}, pares : {pares}')
				os.remove(path)
				print(f'–£–¥–∞–ª–∏–ª {path}')
			elif is_rar_file(path):
				# –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
				await client.download_media(document, file=path)
				print(f"Document downloaded and saved to {path}")
				#–†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º zip
				count_files = list_files_in_rar(path)
				pares = extract_constructionInfo_from_rar(path)
				print(f'message_id: {message_id}, count_files : {count_files}, pares : {pares}')
				os.remove(path)
			elif is_stl_file(path):
				# –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
				await client.download_media(document, file=path)
				print(f"Document downloaded and saved to {path}")
				#–†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º stl
				count_files = 1
				pares = '.stl, NoneConstructionInfo'
				print(f'count_files : {count_files}, pares : {pares}')
				os.remove(path)
			else:
				print(f"Skipping file: {file_name} (not a zip or archive)")

			
			if file_name[0].isdigit():
				number = file_name[0:8]
				file_name_unix = file_name[8::]
				result = [x for x in re.split(r'[_-]', file_name_unix) if x]
				print(result)
				if len(result) == 5:
					med = result[0]
					pac = result[1]
					tip = result[2]
					col = result[3]
					color = result[4][:-4]
				elif len(result) == 4:
					med = result[0]
					pac = result[1]
					tip = result[2]
					col = result[3][:-4]
					color = '–Ω–µ—Ç'
				else:
					# —Ç—É—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∂–∏—Ä–Ω–∞—è, –∞ –¥—Ä—É–≥–∞—è –ø–æ–¥—á–µ—Ä–∫—Ç—É–Ω–∞
					pac, med, tip ,col ,color= 'none','none','none','none','none'
					# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
					random_number = random.randint(1, 11)
					print(random_number)
					image_path = f'img/mem{random_number}.jpg'
					bold_text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ \n"
					underlined_text = "–ù–û–ú–ï–† - –ü–ê–¶–ò–ï–ù–¢ - –í–†–ê–ß - –¢–ò–ü - –ö–û–õ–ò–ß–ï–°–¢–í–û- –¶–í–ï–¢"
					await send_image_with_text(client, event.message.chat_id, image_path, bold_text, underlined_text,event.message.id)

			else:
				number, pac, med, tip ,col ,color= 'none','none','none','none','none','none'
				# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
				random_number = random.randint(1, 11)
				print(random_number)
				image_path = f'img/mem{random_number}.jpg'
				bold_text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ \n"
				underlined_text = "–ù–û–ú–ï–† - –ü–ê–¶–ò–ï–ù–¢ - –í–†–ê–ß - –¢–ò–ü - –ö–û–õ–ò–ß–ï–°–¢–í–û- –¶–í–ï–¢"
				await send_image_with_text(client, event.message.chat_id, image_path, bold_text, underlined_text,event.message.id)
			if caption:
				pass
			else:
				caption = '–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç'
			per = '–ù–µ—Ç'
			if '–ø–µ—Ä–µ–≤—ã–ø—É—Å–∫' in caption.lower():
				per = '–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫'     
			emoji = '‚è≥'
			date_unix = datetime.datetime.now()
			# –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
			date_unix_plus_3_hours = date_unix + datetime.timedelta(hours=3)
			# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
			date_normal = date_unix_plus_3_hours.strftime("%d-%m-%Y %H:%M")
			#_____–ø–µ—Ä–≤–∞—è____–∑–∞–ø–∏—Å—å_____–¥–æ–∫—É–º–µ–Ω—Ç–∞_____
			# new_row = [message_id, file_name, number, pac, med, tip,  emoji, 'none', 'none', date_normal,'none', pares]

			new_row = ['–í —Ä–∞–±–æ—Ç–µ',number,med, pac,  tip, 'none', date_normal, col,color, caption, count_files, per, 'none',user_tg, emoji,  file_name, pares,message_id]
			# columns = ['emoji','–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞','–í—Ä–∞—á','–ü–∞—Ü–∏–µ–Ω—Ç','–¢–∏–ø','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–¶–≤–µ—Ç','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤','–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫','–¢–µ—Ö–Ω–∏–∫','–î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ','–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏','–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞','–ò–º—è —Ñ–∞–π–ª–∞','Number - ImplantLibraryEntryDescriptor','sms_id']
			columns = ['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞','–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞','–ü–∞—Ü–∏–µ–Ω—Ç','–í—Ä–∞—á','–¢–∏–ø','–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏',  '–î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–¶–≤–µ—Ç','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤','–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫','–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å','–¢–µ—Ö–Ω–∏–∫', 'emoji', '–ò–º—è —Ñ–∞–π–ª–∞','Number - ImplantLibraryEntryDescriptor','sms_id']

			df = pd.DataFrame(worksheet.get_all_records(expected_headers = columns)) #–ø–æ–ª—É—á–∏—Ç—å
			df_ = pd.DataFrame([new_row], columns=columns)
			updated_df = pd.concat([df, df_], ignore_index=True)
			set_with_dataframe(worksheet, updated_df)
			format_with_dataframe(worksheet, updated_df, include_column_header=True) #–∑–∞–ø–∏—Å–∞—Ç—å
			print('–ó–∞–ø–∏—Å–∞–ª')

	elif isinstance(event, UpdateEditChannelMessage):
		# print(event)
		message_id = event.message.id
		# print(f"Channel message edited: {event}")
		# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–π
		message_reactions[message_id] = {'old_reactions': [], 'new_reactions': []}
	elif isinstance(event, UpdateBotMessageReaction):
		print(event)
		all_users = await get_group_participants(client,-1002154104395)
		print(all_users)
		char = ''
		date_finish = ''
		date_unix = datetime.datetime.now()
		# –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
		date_unix_plus_3_hours = date_unix + datetime.timedelta(hours=3)
		# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
		date_normal = date_unix_plus_3_hours.strftime("%d-%m-%Y %H:%M")
		sms_id = event.msg_id
		user_id_ = event.actor.user_id
		# user_id_ = 1223812779 #—á–µ–ª–∏–∫ –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞
		user_tg = all_users[user_id_]
		if user_tg is None:
			user_tg = user_id_
		emoji = ''
		list_old_e = []
		message_id = event.msg_id

		if message_id in message_reactions:
			# print(f'{[reaction.emoticon for reaction in event.old_reactions]}')
			# print(f'{[reaction.emoticon for reaction in event.new_reactions]}')
			old_reactions = [reaction.emoticon for reaction in event.old_reactions]
			new_reactions = [reaction.emoticon for reaction in event.new_reactions]
			# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–µ–∞–∫—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
			# old_reactions.extend([reaction.emoticon for reaction in event.old_reactions])
			# new_reactions.extend([reaction.emoticon for reaction in event.new_reactions])
			message_reactions[message_id]['old_reactions'] = old_reactions
			message_reactions[message_id]['new_reactions'] = new_reactions
			print(f"Reactions for message ID {message_id}:")
			print(f"Old reactions: {old_reactions}")
			print(f"New reactions: {new_reactions}")
			# –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
			# current_reactions = list(set(new_reactions) - set(old_reactions))
			# print(f"Current reaction on message ID {message_id}: {current_reactions}")
			# if len(current_reactions) != 0:
			if len(new_reactions) != 0:
				for i in range(len(old_reactions)):
					list_old_e.append(old_reactions[i])
				for i in range(len(new_reactions)):
					if new_reactions[i] not in list_old_e:
						# print(update["message_reaction"]["new_reaction"][i]["emoji"])
						if new_reactions[i] == '‚ù§':
							char += f'‚ù§Ô∏è - {emoji_list['‚ù§Ô∏è']}'
							date_finish += f'{date_normal}'
							# print(emoji_list['‚ù§Ô∏è'])
						elif new_reactions[i] == 'ü§¨':
							char += f'ü§¨ - {emoji_list['ü§¨']}'
							# print(emoji_list['ü§¨'])
						elif new_reactions[i] == 'üíî':
							char += f'üíî - {emoji_list['üíî']}'
							# print(emoji_list['üíî'])
						elif new_reactions[i] == 'üò°':
							char += f'üò° - {emoji_list['üò°']}'
							# print(emoji_list['üò°'])
						elif new_reactions[i] == 'ü§î':
							char += f'ü§î - {emoji_list['ü§î']}'
							# print(emoji_list['ü§î'])

				for i in range(len(new_reactions)):
					emoji += new_reactions[i]
					print(f'sms_id : {sms_id}, message_reaction : {emoji}, char :{char}')
			else:
				emoji = '‚è≥'
				print(f'sms_id : {sms_id}, message_reaction : {emoji}, char :{char}')

			# –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
			columns = ['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞','–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞','–ü–∞—Ü–∏–µ–Ω—Ç','–í—Ä–∞—á','–¢–∏–ø','–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏',  '–î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–¶–≤–µ—Ç','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤','–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫','–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å','–¢–µ—Ö–Ω–∏–∫', 'emoji', '–ò–º—è —Ñ–∞–π–ª–∞','Number - ImplantLibraryEntryDescriptor','sms_id']

			df = pd.DataFrame(worksheet.get_all_records(expected_headers = columns))
			list_sms_id = df['sms_id'].tolist()
			if sms_id in list_sms_id:
				row_index = list_sms_id.index(sms_id)
				df.loc[row_index, 'emoji'] = emoji
				if char:
					# print(f'{char} - {update["message_reaction"]["user"]["username"]} - {date_normal}')
					if df['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'][row_index] == '–í —Ä–∞–±–æ—Ç–µ':
						df.loc[row_index, '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'] = f'{char} from: {user_tg} - {date_normal}'
					else:
						df.loc[row_index, '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'] = f'{df['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'][row_index]}\n{char} from: {user_tg} - {date_normal}'
				if df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'][row_index] == 'none':
					df.loc[row_index, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'] = f'{user_tg}'
				if date_finish:
					df.loc[row_index, '–ì–æ—Ç–æ–≤–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏'] = f'{date_finish}'

			set_with_dataframe(worksheet, df)
			format_with_dataframe(worksheet, df, include_column_header=True) #–∑–∞–ø–∏—Å–∞—Ç—å
			print('–ó–∞–ø–∏—Å–∞–ª –†–µ–∞–∫—Ü–∏—é')


client.start()
client.run_until_disconnected()
